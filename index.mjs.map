{"version":3,"file":"index.mjs","sources":["../lib/ctor.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property' ;\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isnan from '@stdlib/assert-is-nan' ;\nimport entropy from '@stdlib/stats-base-dists-logistic-entropy' ;\nimport kurtosis from '@stdlib/stats-base-dists-logistic-kurtosis' ;\nimport mean from '@stdlib/stats-base-dists-logistic-mean' ;\nimport median from '@stdlib/stats-base-dists-logistic-median' ;\nimport mode from '@stdlib/stats-base-dists-logistic-mode' ;\nimport skewness from '@stdlib/stats-base-dists-logistic-skewness' ;\nimport stdev from '@stdlib/stats-base-dists-logistic-stdev' ;\nimport variance from '@stdlib/stats-base-dists-logistic-variance' ;\nimport cdf from '@stdlib/stats-base-dists-logistic-cdf' ;\nimport logcdf from '@stdlib/stats-base-dists-logistic-logcdf' ;\nimport logpdf from '@stdlib/stats-base-dists-logistic-logpdf' ;\nimport mgf from '@stdlib/stats-base-dists-logistic-mgf' ;\nimport pdf from '@stdlib/stats-base-dists-logistic-pdf' ;\nimport quantile from '@stdlib/stats-base-dists-logistic-quantile' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction logisticCDF( x ) {\n\treturn cdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction logisticLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction logisticLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction logisticMGF( t ) {\n\treturn mgf( t, this.mu, this.s );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction logisticPDF( x ) {\n\treturn pdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction logisticQuantile( p ) {\n\treturn quantile( p, this.mu, this.s );\n}\n\n\n// MAIN //\n\n/**\n* Logistic distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [s=1.0] - scale parameter\n* @throws {TypeError} `s` must be a positive number\n* @returns {Logistic} distribution instance\n*\n* @example\n* var logistic = new Logistic( 1.0, 1.0 );\n*\n* var y = logistic.cdf( 1.5 );\n* // returns ~0.622\n*\n* var mu = logistic.mean;\n* // returns 1.0\n*/\nfunction Logistic() {\n\tvar mu;\n\tvar s;\n\tif ( !(this instanceof Logistic) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Logistic();\n\t\t}\n\t\treturn new Logistic( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( format( '0XD7u', s ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\ts = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Logistic distribution differential entropy.\n*\n* @name entropy\n* @memberof Logistic.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.entropy;\n* // returns ~4.485\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.s );\n});\n\n/**\n* Logistic distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Logistic.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.kurtosis;\n* // returns 1.2\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.s );\n});\n\n/**\n* Logistic distribution expected value.\n*\n* @name mean\n* @memberof Logistic.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.s );\n});\n\n/**\n* Logistic distribution median.\n*\n* @name median\n* @memberof Logistic.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'median', function get() {\n\treturn median( this.mu, this.s );\n});\n\n/**\n* Logistic distribution mode.\n*\n* @name mode\n* @memberof Logistic.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.s );\n});\n\n/**\n* Logistic distribution skewness.\n*\n* @name skewness\n* @memberof Logistic.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.s );\n});\n\n/**\n* Logistic distribution standard deviation.\n*\n* @name stdev\n* @memberof Logistic.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.stdev;\n* // returns ~21.766\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.s );\n});\n\n/**\n* Logistic distribution variance.\n*\n* @name variance\n* @memberof Logistic.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.variance;\n* // returns ~473.741\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.s );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.cdf( 0.5 );\n* // returns ~0.407\n*/\nsetReadOnly( Logistic.prototype, 'cdf', logisticCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.logcdf( 0.5 );\n* // returns ~-0.898\n*/\nsetReadOnly( Logistic.prototype, 'logcdf', logisticLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.logpdf( 0.8 );\n* // returns ~-2.795\n*/\nsetReadOnly( Logistic.prototype, 'logpdf', logisticLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.mgf( 0.2 );\n* // returns ~6.379\n*/\nsetReadOnly( Logistic.prototype, 'mgf', logisticMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.pdf( 0.8 );\n* // returns ~0.061\n*/\nsetReadOnly( Logistic.prototype, 'pdf', logisticPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Logistic.prototype, 'quantile', logisticQuantile );\n\n\n// EXPORTS //\n\nexport default Logistic;\n"],"names":["Logistic","mu","s","this","arguments","length","isNumber","isnan","TypeError","format","isPositive","defineProperty","configurable","enumerable","get","set","value","setReadOnlyAccessor","prototype","entropy","kurtosis","mean","median","mode","skewness","stdev","variance","setReadOnly","x","cdf","logcdf","logpdf","t","mgf","pdf","p","quantile"],"mappings":";;wiEAwIA,SAASA,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAUI,UAAW,GAAKA,UAAW,IAEjD,GAAKA,UAAUC,OAAS,CAGvB,GADAH,EAAIE,UAAW,IACTE,EAFNL,EAAKG,UAAW,KAEQG,EAAON,GAC9B,MAAM,IAAIO,UAAWC,EAAQ,sEAAuER,IAErG,IAAMS,EAAYR,GACjB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,SAGvCD,EAAK,EACLC,EAAI,EA4BL,OA1BAS,EAAgBR,KAAM,KAAM,CAC3BS,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,GAERc,IAAO,SAAcC,GACpB,IAAMV,EAAUU,IAAWT,EAAOS,GACjC,MAAM,IAAIR,UAAWC,EAAQ,qDAAsDO,IAEpFf,EAAKe,KAGPL,EAAgBR,KAAM,IAAK,CAC1BS,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,GAERa,IAAO,SAAcC,GACpB,IAAMN,EAAYM,GACjB,MAAM,IAAIR,UAAWC,EAAQ,8DAA+DO,IAE7Fd,EAAIc,KAGCb,KAiBRc,EAAqBjB,EAASkB,UAAW,WAAW,WACnD,OAAOC,EAAShB,KAAKF,GAAIE,KAAKD,MAiB/Be,EAAqBjB,EAASkB,UAAW,YAAY,WACpD,OAAOE,EAAUjB,KAAKF,GAAIE,KAAKD,MAiBhCe,EAAqBjB,EAASkB,UAAW,QAAQ,WAChD,OAAOG,EAAMlB,KAAKF,GAAIE,KAAKD,MAiB5Be,EAAqBjB,EAASkB,UAAW,UAAU,WAClD,OAAOI,EAAQnB,KAAKF,GAAIE,KAAKD,MAiB9Be,EAAqBjB,EAASkB,UAAW,QAAQ,WAChD,OAAOK,EAAMpB,KAAKF,GAAIE,KAAKD,MAiB5Be,EAAqBjB,EAASkB,UAAW,YAAY,WACpD,OAAOM,EAAUrB,KAAKF,GAAIE,KAAKD,MAiBhCe,EAAqBjB,EAASkB,UAAW,SAAS,WACjD,OAAOO,EAAOtB,KAAKF,GAAIE,KAAKD,MAiB7Be,EAAqBjB,EAASkB,UAAW,YAAY,WACpD,OAAOQ,EAAUvB,KAAKF,GAAIE,KAAKD,MAmBhCyB,EAAa3B,EAASkB,UAAW,OAnSjC,SAAsBU,GACrB,OAAOC,EAAKD,EAAGzB,KAAKF,GAAIE,KAAKD,MAoT9ByB,EAAa3B,EAASkB,UAAW,UA1SjC,SAAyBU,GACxB,OAAOE,EAAQF,EAAGzB,KAAKF,GAAIE,KAAKD,MA2TjCyB,EAAa3B,EAASkB,UAAW,UAjTjC,SAAyBU,GACxB,OAAOG,EAAQH,EAAGzB,KAAKF,GAAIE,KAAKD,MAkUjCyB,EAAa3B,EAASkB,UAAW,OAxTjC,SAAsBc,GACrB,OAAOC,EAAKD,EAAG7B,KAAKF,GAAIE,KAAKD,MAyU9ByB,EAAa3B,EAASkB,UAAW,OA/TjC,SAAsBU,GACrB,OAAOM,EAAKN,EAAGzB,KAAKF,GAAIE,KAAKD,MAgV9ByB,EAAa3B,EAASkB,UAAW,YAtUjC,SAA2BiB,GAC1B,OAAOC,EAAUD,EAAGhC,KAAKF,GAAIE,KAAKD"}